%class StateMachineControl
%header StateMachineControl.hpp

%include "../../controllers/TrajectoryLibrary/Trajectory.hpp"
%declare class Trajectory;

%start AirplaneFsm::ExecuteTrajectory


%map AirplaneFsm
%%

// Syntax:
//
// State {
//  TransitionEvent
//      [guard]
//      NextState
//      {Action}
// }

//WaitForTakeoff {

    //ImuUpdate(msg: const mav::pose_t&)
        //[ctxt.EvalTakeoff(msg) == true]
        //TakeoffNoThrottle
        //{}

    //ImuUpdate(msg: const mav::pose_t&)
        //// []
        //nil
        //{ DoControl(msg); }
//}

//TakeoffNoThrottle {

    //ImuUpdate(msg: const mav::pose_t&)
        //[ctxt.ReadyForThrottle(msg) == true]
        //Climb
        //{}

    //ImuUpdate(msg: const mav::pose_t&)
        //// []
        //nil
        //{ DoControl(msg); }

//}

//Climb {

    //ImuUpdate(msg: const mav::pose_t&)
        //[ctxt.AtCrusingAltitude(msg) == true]
        //Cruise
        //{}

    //ImuUpdate(msg: const mav::pose_t&)
        //// []
        //nil
        //{ DoControl(msg); }
//}

ExecuteTrajectory
    Entry { RequestNewTrajectory(); }
{

    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.CheckTrajectoryExpired() == true ]
        ExecuteTrajectory
        {}

    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.BetterTrajectoryAvailable() == true ]
        ExecuteTrajectory
        {}

    ImuUpdate(msg: const mav::pose_t&)
        // []
        nil
        {}

}


%%
