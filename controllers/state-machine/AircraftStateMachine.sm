%class StateMachineControl
%header StateMachineControl.hpp

%include "../../controllers/TrajectoryLibrary/Trajectory.hpp"
%declare class Trajectory;

%start AirplaneFsm::WaitForTakeoff


%map AirplaneFsm
%%

// Syntax:
//
// State {
//  TransitionEvent
//      [guard]
//      NextState
//      {Action}
// }


WaitForTakeoff
    Entry {
        SetNextTrajectoryByNumber(ctxt.GetClimbNoThrottleTrajNum());
        RequestNewTrajectory();
        SendStateMsg("WaitForTakeoff");
    }
{
    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.IsTakeoffAccel(msg) == true ]
        LargeAccel1
        {}

    ImuUpdate(msg: const mav::pose_t&)
        // []
        nil
        {}

    AutonomousMode()
        // []
        nil
        {
            SetNextTrajectoryByNumber(ctxt.GetClimbNoThrottleTrajNum());
            RequestNewTrajectory();
        }

    ArmForTakeoff()
        // []
        nil
        {}

    SingleTrajectoryRequest(traj_num: int)
        // []
        RunSingleTrajectory
        { SetNextTrajectoryByNumber(traj_num); }

}

LargeAccel1
    Entry {
        SendStateMsg("LargeAccel1");
    }
{
    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.IsTakeoffAccel(msg) == true ]
        TakeoffNoThrottle
        {}

    ImuUpdate(msg: const mav::pose_t&)
        // []
        WaitForTakeoff
        {}

    ArmForTakeoff()
        // []
        WaitForTakeoff
        {}

    AutonomousMode()
        // []
        nil
        {
            SetNextTrajectoryByNumber(ctxt.GetClimbNoThrottleTrajNum());
            RequestNewTrajectory();
        }

    SingleTrajectoryRequest(traj_num: int)
        // []
        RunSingleTrajectory
        { SetNextTrajectoryByNumber(traj_num); }
}

TakeoffNoThrottle
    Entry {
        SetNextTrajectoryByNumber(ctxt.GetClimbNoThrottleTrajNum());
        RequestNewTrajectory();
        SetTakeoffTime();
        SetTakeoffBearing();
        SendStateMsg("TakeoffNoThrottle");
        SendAltitudeResetMsg();
    }
{
    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.HasClearedCable(msg) == true && ctxt.VelocityOkForThrottle(msg) == true ]
        Climb
        {}

    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.HasClearedCable(msg) == true && ctxt.VelocityOkForThrottle(msg) == false ]
        WaitForTakeoff
        {}

    ImuUpdate(msg: const mav::pose_t&)
        // []
        nil
        {}

    AutonomousMode()
        // []
        nil
        {}

    ArmForTakeoff()
        // []
        WaitForTakeoff
        {}

    SingleTrajectoryRequest(traj_num: int)
        // []
        RunSingleTrajectory
        { SetNextTrajectoryByNumber(traj_num); }

}

Climb
    Entry {
        SetNextTrajectoryByNumber(ctxt.GetClimbWithThrottleTrajNum());
        RequestNewTrajectory();
        SendStateMsg("Climb");
    }
{
    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.ReachedCrusingAltitude(msg) == true ]
        ExecuteTrajectory
        { SetBestTrajectory(); }

    ImuUpdate(msg: const mav::pose_t&)
        // []
        nil
        {}

    AutonomousMode()
        // []
        nil
        {}

    ArmForTakeoff()
        // []
        WaitForTakeoff
        {}

    SingleTrajectoryRequest(traj_num: int)
        // []
        RunSingleTrajectory
        { SetNextTrajectoryByNumber(traj_num); }
}

ExecuteTrajectory
    Entry {
        RequestNewTrajectory();
        SendStateMsg("ExecuteTrajectory");
    }
{

    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.CheckTrajectoryExpired() == true ]
        ExecuteTrajectory
        { SetBestTrajectory(); }

    ImuUpdate(msg: const mav::pose_t&)
        [ ctxt.BetterTrajectoryAvailable() == true ]
        ExecuteTrajectory
        {}

    ImuUpdate(msg: const mav::pose_t&)
        // []
        nil
        {}

    ArmForTakeoff()
        // []
        WaitForTakeoff
        {}

    SingleTrajectoryRequest(traj_num: int)
        // []
        RunSingleTrajectory
        { SetNextTrajectoryByNumber(traj_num); }

    AutonomousMode()
        // []
        nil
        { }

}

RunSingleTrajectory
    Entry {
        RequestNewTrajectory();
        SendStateMsg("RunSingleTrajectory");
    }
{
    ImuUpdate(msg: const mav::pose_t&)
        // []
        nil
        {}

    SingleTrajectoryRequest(traj_num: int)
        // []
        RunSingleTrajectory
        { SetNextTrajectoryByNumber(traj_num); }

    AutonomousMode()
        // []
        ExecuteTrajectory
        { SetBestTrajectory(); }

    ArmForTakeoff()
        // []
        WaitForTakeoff
        {}
}


%%
